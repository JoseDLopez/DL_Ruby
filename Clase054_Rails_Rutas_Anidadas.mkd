#####Clase 54
03-Nov-16
#RUTAS ANIDADAS

Lo que deberiamos saber:

SCAFFOLD, saber como funcionan las rutas, los gets, resultados anonimos, strong params para agregar campos nuevos.


Hoy seguiremos profundizando con REST, formularios anidados, y rutas anidadas.

http://empieza.desafiolatam.com/cohorts/11/sections/153/edit

donde el cohort es el principal

Para que se anidan los recursos,

La idea es la leer la informacion relacionada en diferentes niveles y utilizar multiples parametros en una sola llamada.

Dentro del controller podemos rescatar el id del cohort con params[:cohort_id] y el id de la seccion con params[:id]

Ejemplo comun:

POST -> COMENTARIO

En este sentido de creacion de dependencia, los comentarios dependen del POST y sin el post no representan algo.

Al crear un comentario necesitamos guardarlo asociado al post, por lo que necesitamos rescatar el post.


La estrategia REST dice que para anidar un recurso dentro de otro deberiamos hacerlo siguiente:

	posts/5/comments

Los comentarios son asociados a los posts.

**EN RAILS 4 NO PODEMOS HACER UN SCAFFOLD ANIDADO**

**La idea es que las rutas anidadas guien al usuario en la navegacion, no necesariamente reprsenta las relaciones de la base de datos.**

###ANIDANDO RUTAS

1. Crearemos un nuevo proyecto con los posts y luego comentarios y luego asociaremos a nivel de modelo y luego anidaremos las rutas.

		rails new post_exercise

2. Hacemos SCAFFOLD de post

		rails g scaffold Post title:string content:text

	Corremos las migraciones:

		rake db:migrate

3. Perfecto, ahora tenemos que cada post puede ser creado con un título y un contenido, pero resulta que ahora queremos que los posts tengan comentarios asociados. Es decir tendremos que anidar el modelo. Primero crearemos el modelo de los comentarios, que se encuentra referenciado al post:

		rail g model Comment post:references content:text

	Debemos agregar la relacion de los modelos, para ello vamos al modelo de comment(app -> models -> comment) y nos aseguramos que tenga la relacion con los posts:

		class Comment < ActiveRecord::Base
			belongs_to :post
		end

	Y agregamos la relacion en el modelo de los posts (app -> models -> comment):

		class Post < ActiveRecord::Base
			has_many :comments, dependent: :destroy
		end

	Corremos las migraciones:

		rake db:migrate

4. Ahora anidaremos las rutas de los comentarios dentro de los posts, para esto vamos a **routes**, y le agregamos un bloque que indica que se esta anidando. Esto hace que se cree una ruta: posts/id_post/comments:

		Rails.application.routes.draw do
			resources :posts do
				resources :comments
		end

	De esa manera nuestras rutas pasan de:

	   	Prefix Verb   	URI Pattern               Controller#Action
    	posts GET   	/posts(.:format)          posts#index
        POST   			/posts(.:format)          posts#create
 		new_post GET    /posts/new(.:format)      posts#new
		edit_post GET   /posts/:id/edit(.:format) posts#edit
     	post GET    	/posts/:id(.:format)      posts#show
        PATCH  			/posts/:id(.:format)      posts#update
        PUT    			/posts/:id(.:format)      posts#update
        DELETE 			/posts/:id(.:format)      posts#destroy

	A esto:

	    Prefix Verb   			URI Pattern                                 Controller#Action
    	post_comments GET    	/posts/:post_id/comments(.:format)          comments#index
                  POST   		/posts/:post_id/comments(.:format)          comments#create
 		new_post_comment GET    /posts/:post_id/comments/new(.:format)      comments#new
		edit_post_comment GET   /posts/:post_id/comments/:id/edit(.:format) comments#edit
     	post_comment GET    	/posts/:post_id/comments/:id(.:format)      comments#show
                  PATCH  		/posts/:post_id/comments/:id(.:format)      comments#update
                  PUT    		/posts/:post_id/comments/:id(.:format)      comments#update
                  DELETE 		/posts/:post_id/comments/:id(.:format)      comments#destroy
        posts GET    			/posts(.:format)                            posts#index
                  POST   		/posts(.:format)                            posts#create
        new_post GET    		/posts/new(.:format)                        posts#new
        edit_post GET    		/posts/:id/edit(.:format)                   posts#edit
        post GET    			/posts/:id(.:format)                        posts#show
                  PATCH  		/posts/:id(.:format)                        posts#update
                  PUT    		/posts/:id(.:format)                        posts#update
                  DELETE 		/posts/:id(.:format)                        posts#destroy

5. El problema es que no tenemos un action para los comentarios, es decir ahora debemos crear un controlador para que administre los comentarios. Por lo cual generaremos un controlador.

		rails g controller comments index

	Esto nos genereara un controlador de comments con la vista index.

	Ademas nos genera la ruta:

		Rails.application.routes.draw do
				get 'comments/index'

				resources :posts do
				resources :comments
			end
		end

	Pero como queremos limitar el acceso a los comments, por lo cual simplemente borraremos la ruta que se generó
		Rails.application.routes.draw do
				#get 'comments/index'

				resources :posts do
					resources :comments
				end
		end

6. En este punto si entramos a la direccion de los posts, veremos cada uno, pero si queremos ver los comentarios de ese post accediento por el siguiente enlace, solamente veremos la vista por defecto de los comments:

		localhost/posts/16/comments

	Entonces tenemos que modificar el index del comments, pero tenemos que modificar el controlador tambien. Entonces primero iremos a app -> controller -> comments, y modificaremos el index para agregar:

		def index
			@post = Post.find(params[:post_id])
			@comments = @post.comments
		end

	Ahi decimos que estamos buscando los posts por su id, ya que sabemos que el id viene de los parametros, y decimos que los comments son todos los comentarios asociado a ese post. 

	Modificaremos ahora el index para que muestre los comentarios, para eso vamos a app -> views -> comments -> index, y colocaremos:

		<h1>Comentarios del POST: <%= @post.title %></h1>
		<p><%= @post.content %></p>

		<p>Comentarios:</p>
		<% @comments.each do |c| %>
		<p> <%= c.content %> </p>
		<% end %>

7. Pero, tambien queremos mostrar los comentarios de los posts, en el mismo posts, para ello vamos al show, y agregamos:

		<p><strong>Último comentario:</strong>
		<% if @comments.last.nil? == false %>
			<%= @comments.last.content %>
			<% end %></p>


		<%= link_to 'Todos los Comentarios', post_comments_path(@post) %>
		<%= link_to 'Edit', edit_post_path(@post) %> |
		<%= link_to 'Back', posts_path %>

	Pero para que eso funcione debemos modificar el controlador del post

		def show
    		@comments = @post.comments
    	end

    De esta manera, mostramos el ultimo comentario en la pagina del post, y podemos ver todos los comentarios haciendo click.

8. Que sucede, pues que tambien queremos poder agregar comentarios en cada post. Para ello, usaremos algo que se llama **formularios anidados**, esto nos permite agregar un formulario anidado en un recurso mayor. Nos vamos a dirigir al show del post y agregaremos un formulario aqui. Este tambien ocupa rutas anidadas para redireccionar sus recursos. Entonces, en el show del post agregamos:

		<h2>Agregar Comentario:</h2>

		Y ahora agregamos el formulario

		<%= form_for [@post, Comment.new] do |f| %>
			<%= f.text_area :content %>
			<%= f.submit "Enviar" %>
		<% end %>

		Esto agrega un formulario, y entrega el primer parametro que es el post, ademas de la accion que es crear un comentario nuevo. donde f es el elemento constructor del formulario y va a tener los parametros de contenido y el metodo de enviar.


9. El problema es que si nosotros decidimos enviar este comentario, vamos a tener un ERROR, ya que no existe un controlador que pueda hacerse cargo de esta informacion. Por lo cual tenemos que ir al controlador de los comentarios. Aca, nosotros agregamos el metodo de crear, para indicar que sucede ahi:

		Creamos el create y entregamos los parametros del post y del comment, estos vienen sanitizados por un comment params donde solamente permite que se ingrese contenido.


		def create
			@post = Post.find(params[:post_id])
			@post.comments.build(comment_params)
			@post.save

			redirect_to post_comments_path(@post)
		end

		private
		def comment_params
			params.require(:comment).permit(:content)
		end

		Debemos SANITIZAR es decir utilizar el private para evitar que nos inyecten datos. Es **MUY** importante SANITIZAR.

10. Ahora haremos el método EDIT y el UPDATE de los comentarios. Para esto debemos modificar el show de los comentarios, y agregaremos un link de edit y este nos llevará a una actualizacion. Tambien agregaremos eliminar un comentario. Empezando por eliminar un comentario.

		Nos aseguramos que primero exista una ruta creada para borrar. para ello vamos a nuestra ruta anidada y permitimos que se encuentren el delete y el edit:

		resources :posts do
	    	resources :comments, only: [:index, :create, :destroy]
	  	end

	  	Ahora vamos a crear el link en nuestra vista que nos direcciona a esa accion, esta link debe llevar el path o la ruta, que segun nuestro rake routes es post_comment_path(@post,c), se coloca el post y el comentario ya que son los parametros que nos piden. Tambien nos pide el metodo que estamos realizando que sería delete. y agregamos una confirmacion de borrado, no es obligatorio.

		<p>Comentarios:</p>
			<% @comments.each do |c| %>
				<p> <%= c.content %> <%= link_to 'Delete', post_comment_path(@post,c), method: :delete, data: { confirm: 'Are you sure?' } %></p>
		<% end %>

		Una vez que tenemos listo nuestra ruta, procedemos a generar un metodo de destroy en nuestro controlador, por lo cual nos dirigimos al controlador del comentario y agregamos, lo siguiente que contiene el metodo llamado destroy, recoge la informacion del post y del comment segun su id, y procede a ejecutar la elimiacion, para luego redirigirnos a la vista que nos interesa.

		def destroy
			@post = Post.find(params[:post_id])
			@comment = Comment.find(params[:id])

			@comment.destroy

			redirect_to post_comments_path(@post)
		end

		Bien, ahora si queremos hacer el EDIT hacemos lo siguiente, primero nos aseguramos que exista una ruta para edit y update:

		resources :posts do
			resources :comments, only: [:index, :create, :destroy, :edit, :update]
		end

		Luego de esto, creamos el link que nos permite ir a editar el comentario, es decir, trae la informacion de ese comentario y nos permite editarla, para ello tenemos una vista que se llama edit. Entonces en el index del post donde salen todos los comentarios mostramos el enlace a edit:

		<p>Comentarios:</p>
			<% @comments.each do |c| %>
			<p> <%= c.content %> || <%= link_to 'Edit', edit_post_comment_path(@post,c), method: :get %> || <%= link_to 'Delete', post_comment_path(@post,c), method: :delete, data: { confirm: 'Are you sure?' } %></p>
		<% end %>

		Ahora que tenemos el link debemos indicar un metodo que nos diga que hacer con esto. entonces en el comment controller hacemos:

		def edit
			@post = Post.find(params[:post_id])
			@comment = Comment.find(params[:id])
		end

		Y ademas en nuestra vista de edit agregamos el formulario que tomara la informacion existente, y ademas presentará un botón de enviar para poder procesar esa informacion. Que sucede, pues que al dar click en enviar nosotros debemos reaccionar a esto.

		<h1>Editing Comment</h1>

		<%= form_for [@post, @comment] do |f| %>
			<%= f.text_area :content %>
			<%= f.submit "Enviar" %>
		<% end %>

		El usuario al presionar enviar, activara nuestro metodo update, por lo cual debemos agregar en nuestro controlador de comentarios la acciona a realizar. Esto lo que hace es que toma el post, el comment, y dice que va a actualizar los atributos de este comment con los parametros que esta recibiendo y luego lo va a redirigir a los posts.

		def update
			@post = Post.find(params[:post_id])
			@comment = Comment.find(params[:id])

			@comment.update_attributes(comment_params)

			redirect_to post_comments_path(@post)
		end




Ejercicio en clases

1. Crear proyecto nuevo

		rails new salon

2. Este proyecto tiene grupos, personas y apuntes (3 niveles de anidamiento)

	Crearemos con scaffold grupos, mientras que personas y apuntes lo haremos normal.

		rails g scaffold Group name:string

		rails g model Person name:string group:references

		rails g model Note content:text person:references

	Ahora agregamos la relacion en cada uno de los modelos:

		class Person < ActiveRecord::Base
		  belongs_to :group
		  has_many :notes
		end

		class Group < ActiveRecord::Base
			has_many :people
		end

		class Note < ActiveRecord::Base
		  belongs_to :person
		end


