#####Clase 54
03-Nov-16
#RUTAS ANIDADAS

Lo que deberiamos saber:

SCAFFOLD, saber como funcionan las rutas, los gets, resultados anonimos, strong params para agregar campos nuevos.


Hoy seguiremos profundizando con REST, formularios anidados, y rutas anidadas.

http://empieza.desafiolatam.com/cohorts/11/sections/153/edit

donde el cohort es el principal

Para que se anidan los recursos,

La idea es la leer la informacion relacionada en diferentes niveles y utilizar multiples parametros en una sola llamada.

Dentro del controller podemos rescatar el id del cohort con params[:cohort_id] y el id de la seccion con params[:id]

Ejemplo comun:

POST -> COMENTARIO

En este sentido de creacion de dependencia, los comentarios dependen del POST y sin el post no representan algo.

Al crear un comentario necesitamos guardarlo asociado al post, por lo que necesitamos rescatar el post.


La estrategia REST dice que para anidar un recurso dentro de otro deberiamos hacerlo siguiente:

	posts/5/comments

Los comentarios son asociados a los posts.

**EN RAILS 4 NO PODEMOS HACER UN SCAFFOLD ANIDADO**

**La idea es que las rutas anidadas guien al usuario en la navegacion, no necesariamente reprsenta las relaciones de la base de datos.**

###ANIDANDO RUTAS

1. Crearemos un nuevo proyecto con los posts y luego comentarios y luego asociaremos a nivel de modelo y luego anidaremos las rutas.

		rails new post_exercise

2. Hacemos SCAFFOLD de post

		rails g scaffold Post title:string content:text

	Corremos las migraciones:

		rake db:migrate

3. Perfecto, ahora tenemos que cada post puede ser creado con un título y un contenido, pero resulta que ahora queremos que los posts tengan comentarios asociados. Es decir tendremos que anidar el modelo. Primero crearemos el modelo de los comentarios, que se encuentra referenciado al post:

		rail g model Comment post:references content:text

	Debemos agregar la relacion de los modelos, para ello vamos al modelo de comment(app -> models -> comment) y nos aseguramos que tenga la relacion con los posts:

		class Comment < ActiveRecord::Base
			belongs_to :post
		end

	Y agregamos la relacion en el modelo de los posts (app -> models -> comment):

		class Post < ActiveRecord::Base
			has_many :comments, dependent: :destroy
		end

	Corremos las migraciones:

		rake db:migrate

4. Ahora anidaremos las rutas de los comentarios dentro de los posts, para esto vamos a **routes**, y le agregamos un bloque que indica que se esta anidando:

		Rails.application.routes.draw do
			resources :posts do
				resources :comments
		end

	De esa manera nuestras rutas pasan de:

	   	Prefix Verb   	URI Pattern               Controller#Action
    	posts GET   	/posts(.:format)          posts#index
        POST   			/posts(.:format)          posts#create
 		new_post GET    /posts/new(.:format)      posts#new
		edit_post GET   /posts/:id/edit(.:format) posts#edit
     	post GET    	/posts/:id(.:format)      posts#show
        PATCH  			/posts/:id(.:format)      posts#update
        PUT    			/posts/:id(.:format)      posts#update
        DELETE 			/posts/:id(.:format)      posts#destroy

	A esto:

	    Prefix Verb   			URI Pattern                                 Controller#Action
    	post_comments GET    	/posts/:post_id/comments(.:format)          comments#index
                  POST   		/posts/:post_id/comments(.:format)          comments#create
 		new_post_comment GET    /posts/:post_id/comments/new(.:format)      comments#new
		edit_post_comment GET   /posts/:post_id/comments/:id/edit(.:format) comments#edit
     	post_comment GET    	/posts/:post_id/comments/:id(.:format)      comments#show
                  PATCH  		/posts/:post_id/comments/:id(.:format)      comments#update
                  PUT    		/posts/:post_id/comments/:id(.:format)      comments#update
                  DELETE 		/posts/:post_id/comments/:id(.:format)      comments#destroy
        posts GET    			/posts(.:format)                            posts#index
                  POST   		/posts(.:format)                            posts#create
        new_post GET    		/posts/new(.:format)                        posts#new
        edit_post GET    		/posts/:id/edit(.:format)                   posts#edit
        post GET    			/posts/:id(.:format)                        posts#show
                  PATCH  		/posts/:id(.:format)                        posts#update
                  PUT    		/posts/:id(.:format)                        posts#update
                  DELETE 		/posts/:id(.:format)                        posts#destroy

5. El problema es que no tenemos un action para los comentarios, es decir ahora debemos crear un controlador para que administre los comentarios. Por lo cual generaremos un controlador.

		rails g controller comments index

	Esto nos genereara un controlador de comments con la vista index.

	Ademas nos genera la ruta:

		Rails.application.routes.draw do
				get 'comments/index'

				resources :posts do
				resources :comments
			end
		end

	Pero como queremos limitar el acceso a los comments, por lo cual simplemente borraremos la ruta que se generó
		Rails.application.routes.draw do
				#get 'comments/index'

				resources :posts do
				resources :comments
			end
		end

6. En este punto si entramos a la direccion de los posts, veremos cada uno, pero si queremos ver los comentarios de ese post accediento por el siguiente enlace, solamente veremos la vista por defecto de los comments:

		localhost/posts/16/comments

	Entonces tenemos que modificar el index del comments, pero tenemos que modificar el controlador tambien. Entonces primero iremos a app -> controller -> comments, y modificaremos el index para agregar:

		def index
			@post = Post.find(params[:post_id])
			@comments = @post.comments
		end

	Ahi decimos que estamos buscando los posts por su id, ya que sabemos que el id viene de los parametros, y decimos que los comments son todos los comentarios asociado a ese post. 

	Modificaremos ahora el index para que muestre los comentarios, para eso vamos a app -> views -> comments -> index, y colocaremos:

		<h1>Comentarios del POST: <%= @post.title %></h1>
		<p><%= @post.content %></p>

		<p>Comentarios:</p>
		<% @comments.each do |c| %>
		<p> <%= c.content %> </p>
		<% end %>

7. Pero, tambien queremos mostrar los comentarios de los posts, en el mismo posts, para ello vamos al show, y agregamos:

		<p><strong>Último comentario:</strong>
		<%= @comments.last.content %></p>


		<%= link_to 'Todos los Comentarios', post_comments_path(@post) %>
		<%= link_to 'Edit', edit_post_path(@post) %> |
		<%= link_to 'Back', posts_path %>

	Pero para que eso funcione debemos modificar el controlador del post

		def show
    		@comments = @post.comments
    	end

    De esta manera, mostramos el ultimo comentario en la pagina del post, y podemos ver todos los comentarios haciendo click.

Para anidar se pasa un bloque, y dentro de ese bloque, colocamos el elemento que queremos anidar. Y con eso se genera las siete rutas anidadas del recurso.

IMPORTANTE SANITIZAR SIEMPRE

Con el bloque, que se genera con el DO, se anida el recurso en otro. esto se hace en routes.rb.

	resources :posts do
		resources :comments
	end

Esto hace que se cree una ruta: posts/id_post/comments


Si quisieramos ver todos los comentarios del post utilizamos el post_comments GET, y esto va al controllador index del comments.

Para anidar el formulario, nos vamos al show del post. y una ves que tenemos los recursos anidados podemos pasar esos recursos en el formulario anidado.

Con esto nos llevaria al create del comments.




Ejercicio en clases

1. Crear proyecto nuevo

		rails new salon

2. Este proyecto tiene grupos, personas y apuntes (3 niveles de anidamiento)

	Crearemos con scaffold grupos, mientras que personas y apuntes lo haremos normal.

		rails g scaffold Group name:string

		rails g model Person name:string group:references

		rails g model Note content:text person:references

	Ahora agregamos la relacion en cada uno de los modelos:

		class Person < ActiveRecord::Base
		  belongs_to :group
		  has_many :notes
		end

		class Group < ActiveRecord::Base
			has_many :people
		end

		class Note < ActiveRecord::Base
		  belongs_to :person
		end


